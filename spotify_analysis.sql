CREATE TABLE IF NOT EXISTS spotify_history (
    spotify_track_uri TEXT,
    ts TIMESTAMP,
    platform TEXT,
    ms_played INTEGER,
    track_name TEXT,
    artist_name TEXT,
    album_name TEXT,
    reason_start TEXT,
    reason_end TEXT,
    shuffle BOOLEAN,
    skipped BOOLEAN
);

--\COPY spotify_history FROM 'C:\Users\chait\Downloads\Practice\Spotify Streaming Analysis\spotify_history.csv' WITH (FORMAT csv, HEADER, DELIMITER ',');
select * from spotify_history;


alter table spotify_history add column row_id int generated by default as identity primary key;


with cte as (
SELECT row_id,spotify_track_uri, ts AS stop_time,ROUND(ms_played/60000.0,2) minutes_played,
ts - (ms_played * INTERVAL '1 millisecond') AS start_time,ms_played, 
track_name,artist_name,album_name,reason_start,reason_end,shuffle,skipped,
ROW_NUMBER() OVER 
(PARTITION BY spotify_track_uri, ts,
platform,ms_played, track_name,artist_name,album_name,
    reason_start,
    reason_end,
    shuffle,
    skipped 
	order by ts) rn
FROM spotify_history)

delete from spotify_history
where row_id in(
select row_id from cte where rn>1
)


SELECT sum(CASE WHEN spotify_track_uri IS NULL OR spotify_track_uri = '' THEN 1 ELSE 0 END ) as track,
sum(CASE WHEN ts IS NULL THEN 1 ELSE 0 END ) as ts,
sum(CASE WHEN platform IS NULL OR platform = '' THEN 1 ELSE 0 END ) as platform,
sum(CASE WHEN track_name IS NULL THEN 1 ELSE 0 END ) as track_name,
sum(CASE WHEN artist_name IS NULL OR artist_name = '' THEN 1 ELSE 0 END ) as artist_name,
sum(CASE WHEN album_name IS NULL OR album_name = '' THEN 1 ELSE 0 END ) as album_name,
sum(CASE WHEN reason_start IS NULL OR reason_start = '' THEN 1 ELSE 0 END ) as reason_start,
sum(CASE WHEN reason_end IS NULL OR reason_end = '' THEN 1 ELSE 0 END ) as reason_end,
sum(CASE WHEN shuffle IS NULL THEN 1 ELSE 0 END ) as shuffle,
sum(CASE WHEN skipped IS NULL THEN 1 ELSE 0 END ) as skipped
from spotify_history


UPDATE spotify_history
SET 
    reason_start = 'Unknown',
    reason_end = 'Unknown'
WHERE reason_start IS NULL OR reason_end IS NULL;


--Business Questions
--Do users play a more diverse range of tracks when shuffle mode is enabled?
select shuffle,
count(*) as total_tracks,
count(distinct spotify_track_uri) as unique_tracks,
round(count(distinct spotify_track_uri)*100.0/count(*),2) as proportion
from spotify_history
group by shuffle
order by proportion;


--What percentage of tracks played in shuffle mode are interrupted (reason_end)?
SELECT
    round((COUNT(*) * 100.0 / 
        (SELECT COUNT(*) FROM spotify_history WHERE shuffle = TRUE)
    ),2) AS interrupted_percentage
FROM spotify_history
WHERE shuffle = TRUE
AND reason_end IS NOT NULL
AND reason_end != 'trackdone';


SELECT 
	sum(CASE WHEN reason_end != 'trackdone' THEN 1 ELSE 0 END) interrupted_tracks,
    round((COUNT(CASE WHEN reason_end != 'trackdone' THEN 1 END) * 100.0) / COUNT(*),2) AS interrupted_percentage
FROM spotify_history
WHERE shuffle = TRUE;



--Which platforms have the highest shuffle mode usage?
select platform,shuffle,count(shuffle) as total_shuffle_usage
from spotify_history
group by platform,shuffle
order by 3 desc
LIMIT 1;

--Track completion rates:
--What percentage of tracks are stopped early versus completed?
select 
count(*) as total_tracks,
sum(case when reason_end = 'trackdone' then 1 else 0 end) as tracks_completed,
sum(case when reason_end != 'trackdone' then 1 else 0 end) as stopped_early_tracks,
round((sum(case when reason_end = 'trackdone' then 1 else 0 end) *100.0)/count(*),2) as track_completed_percentage,
round((sum(case when reason_end != 'trackdone' then 1 else 0 end)*100.0)/count(*),2)as stopped_early_percentage
from spotify_history

--Are there specific tracks or artists with consistently high interruption rates?
select 
	track_name, 
	artist_name, 
	platform,  
	COUNT(*) AS total_plays,
	sum(case when reason_end != 'trackdone' then 1 else 0 end) interrupted_plays,
	round((sum(case when reason_end != 'trackdone' then 1 else 0 end))*100.0/count(*),2) as interruption_rate
from spotify_history
group by 1, 2, 3
having round((sum(case when reason_end != 'trackdone' then 1 else 0 end))*100.0/count(*),2) >50
order by 6 desc,1, 2


--Does the platform or shuffle mode influence track completion rates?
--Overall Completion Rate by Platform and Shuffle Mode
select platform,shuffle,
count(*) as total_tracks,
count(case when reason_end='trackdone' then 1 end) as completed_tracks,
round(count(case when reason_end='trackdone' then 1 end) *100.0/count(*),3) as completion_rate
from spotify_history
group by platform,shuffle
order by completion_rate desc;

--Completion Rate Comparison: Shuffle vs. Non-Shuffle
    SELECT 
        shuffle,
        COUNT(*) AS total_tracks,
        SUM(CASE WHEN reason_end = 'trackdone' THEN 1 ELSE 0 END) AS completed_tracks,
        ROUND(100.0 * SUM(CASE WHEN reason_end = 'trackdone' THEN 1 ELSE 0 END) / COUNT(*), 2) AS completion_rate
    FROM spotify_history
    GROUP BY shuffle

	
--Completion Rate per Platform (Ignoring Shuffle Mode)
SELECT 
        platform,
        COUNT(*) AS total_tracks,
        SUM(CASE WHEN reason_end = 'trackdone' THEN 1 ELSE 0 END) AS completed_tracks,
        ROUND(100.0 * SUM(CASE WHEN reason_end = 'trackdone' THEN 1 ELSE 0 END) / COUNT(*), 2) AS completion_rate
FROM spotify_history
GROUP BY platform
ORDER BY completion_rate DESC;


/*SELECT reason_end, platform, COUNT(*) AS occurrences
FROM spotify_history
GROUP BY reason_end, platform
ORDER BY platform, occurrences DESC;

SELECT reason_end, shuffle, COUNT(*) AS occurrences
FROM spotify_history
GROUP BY reason_end, shuffle
ORDER BY shuffle, occurrences DESC;*/


--Platform usage trends:
--Which platforms have the longest average playback duration?
select platform, round(avg(ms_played/60000.0),2) as avg_minutes_played
from spotify_history
where ms_played>5000			-- Exclude plays shorter than 5 seconds
group by platform
order by avg_minutes_played desc;

--Are there specific hours or days where platform usage peaks?
-- By hour
select
extract(hour from ts) as by_hour,
count(*) as usage_count
from spotify_history
group by 1
order by usage_count desc;
--By Day
select
to_char(ts,'Day') as day_name,
count(*) as usage_count
from spotify_history
group by 1
order by usage_count desc;

--Most Active Hour & Day for Each Platform
WITH HourlyUsage AS (
    SELECT 
        platform,
        EXTRACT(HOUR FROM ts) AS most_active_hour,
        COUNT(*) AS hour_usage_count,
        RANK() OVER (PARTITION BY platform ORDER BY COUNT(*) DESC) AS rank_hour
    FROM spotify_history
    GROUP BY platform, most_active_hour
),
DailyUsage AS (
    SELECT 
        platform,
        TO_CHAR(ts, 'Day') AS most_active_day,
        COUNT(*) AS day_usage_count,
        RANK() OVER (PARTITION BY platform ORDER BY COUNT(*) DESC) AS rank_day
    FROM spotify_history
    GROUP BY platform, most_active_day
)
SELECT 
    h.platform, 
    h.most_active_hour, 
    h.hour_usage_count,
    d.most_active_day, 
    d.day_usage_count
FROM HourlyUsage h
JOIN DailyUsage d ON h.platform = d.platform
WHERE h.rank_hour = 1 AND d.rank_day = 1
ORDER BY platform;


--Timestamp based insights:
--What are the most popular hours for streaming across different platforms?
WITH HourlyUsage AS (
    SELECT 
        platform,
        EXTRACT(HOUR FROM ts) AS by_hour,
        COUNT(*) AS hour_usage_count,
        RANK() OVER (PARTITION BY platform ORDER BY COUNT(*) DESC) AS rank_hour
    FROM spotify_history
    GROUP BY platform, by_hour
)
 SELECT platform,by_hour,hour_usage_count from HourlyUsage
 where rank_hour <=3
 order by 1,3 desc,2

--Which tracks are most frequently played during peak hours?
WITH peakhour AS (
    SELECT 
        EXTRACT(HOUR FROM ts) AS peak_hour,
        COUNT(*) AS usage_count,
        RANK() OVER (ORDER BY COUNT(*) DESC) AS rank_hour
    FROM spotify_history
    GROUP BY peak_hour
	order by usage_count
	limit 1
)
select
sh.track_name,
sh.artist_name,
count(*) as number_of_plays
from spotify_history sh
join peakhour ph
on extract(hour from sh.ts) = ph.peak_hour
group by 1,2 
order by 3 desc
limit 10



